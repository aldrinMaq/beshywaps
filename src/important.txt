<h2 v-for="(name, index) in names" :key="name">{{ index+1 }} {{ name }}</h2>

v-show = will always render element to DOM

special variable = $event

<template>
  <div class="">
    <div>
    <TextArea
        class=""
        rows="5" cols="100"
        placeholder="Enter message..."
        v-model="textEdit"
    />
    </div>
    <div>
      <button @lick="generate">Generate</button>
      <CustomButton label="Submit" />

    </div>

    <div>
    <TextArea
        rows="5" cols="100"
        v-model="textCopy"
    />
    </div>
  </div>

</template>

<script>
export default {
  name: 'App',
  data() {
    return {
      textEdit: '',
      textCopy: '',
    };
  },
  methods: {
    generate() {
      const words = this.textEdit.split(' '); // Split text into words
      const generatedText = words.map((word, index) => {
        if (index === words.length - 1) {
          return word; // No emoji after the last word
        } else {
          return word + 'ðŸ¤¸'; // Add emoji after each word
        }
      });

      this.textCopy = generatedText.join(' '); // Join words back into text
    },
  },
};
</script>

<style>

</style>

-----------------
import { createApp } from 'vue'
import App from './App.vue'

import Button from 'primevue/button';
import InputText from 'primevue/inputtext';
import Textarea from 'primevue/textarea';


import '/node_modules/primeflex/primeflex.css'
import 'primevue/resources/themes/bootstrap4-dark-purple/theme.css'
import 'primevue/resources/primevue.min.css'
import 'primeicons/primeicons.css'

import PrimeVue from "primevue/config";
const app = createApp(App);

app.component('CustomButton', Button);
app.component('InputText', InputText);
app.component('TextArea', Textarea);



app.use(PrimeVue)
app.mount('#app')

